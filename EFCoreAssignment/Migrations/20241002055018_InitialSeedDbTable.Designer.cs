// <auto-generated />
using System;
using EFCoreAssignment.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCoreAssignment.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241002055018_InitialSeedDbTable")]
    partial class InitialSeedDbTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EFCoreAssignment.Models.Contact", b =>
                {
                    b.Property<int?>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ContactId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BusinessPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Player")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ContactId");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            ContactId = 1,
                            Address = "123 Main St",
                            BusinessPhone = "123-456-7890",
                            City = "New York",
                            Email = "johndoe@example.com",
                            FirstName = "John",
                            LastModified = new DateTime(2024, 10, 2, 5, 50, 17, 744, DateTimeKind.Utc).AddTicks(7715),
                            LastName = "Doe",
                            MobilePhone = "987-654-3210",
                            Player = "Player A"
                        },
                        new
                        {
                            ContactId = 2,
                            Address = "456 Oak St",
                            BusinessPhone = "234-567-8901",
                            City = "Los Angeles",
                            Email = "janesmith@example.com",
                            FirstName = "Jane",
                            LastModified = new DateTime(2024, 10, 2, 5, 50, 17, 744, DateTimeKind.Utc).AddTicks(7718),
                            LastName = "Smith",
                            MobilePhone = "876-543-2109",
                            Player = "Player B"
                        },
                        new
                        {
                            ContactId = 3,
                            Address = "789 Pine St",
                            BusinessPhone = "345-678-9012",
                            City = "Chicago",
                            Email = "michaelj@example.com",
                            FirstName = "Michael",
                            LastModified = new DateTime(2024, 10, 2, 5, 50, 17, 744, DateTimeKind.Utc).AddTicks(7721),
                            LastName = "Johnson",
                            MobilePhone = "765-432-1098",
                            Player = "Player C"
                        },
                        new
                        {
                            ContactId = 4,
                            Address = "101 Maple St",
                            BusinessPhone = "456-789-0123",
                            City = "Houston",
                            Email = "emilyd@example.com",
                            FirstName = "Emily",
                            LastModified = new DateTime(2024, 10, 2, 5, 50, 17, 744, DateTimeKind.Utc).AddTicks(7723),
                            LastName = "Davis",
                            MobilePhone = "654-321-0987",
                            Player = "Player D"
                        },
                        new
                        {
                            ContactId = 5,
                            Address = "202 Cedar St",
                            BusinessPhone = "567-890-1234",
                            City = "Phoenix",
                            Email = "davidw@example.com",
                            FirstName = "David",
                            LastModified = new DateTime(2024, 10, 2, 5, 50, 17, 744, DateTimeKind.Utc).AddTicks(7725),
                            LastName = "Wilson",
                            MobilePhone = "543-210-9876",
                            Player = "Player E"
                        });
                });

            modelBuilder.Entity("EFCoreAssignment.Models.EmailTemplate", b =>
                {
                    b.Property<int?>("EmailTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("EmailTemplateId"));

                    b.Property<string>("EmailTemplateBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailTemplateName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmailTemplateSubject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.HasKey("EmailTemplateId");

                    b.ToTable("EmailTemplates");
                });

            modelBuilder.Entity("EFCoreAssignment.Models.Monitoring", b =>
                {
                    b.Property<int>("MonitoringId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MonitoringId"));

                    b.Property<string>("Aggregate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactCC")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Delay")
                        .HasColumnType("int");

                    b.Property<string>("LastControlPosition")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NextReconciliationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Node")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NodeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Player")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProcessDuration")
                        .HasColumnType("int");

                    b.Property<string>("SLA")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Shifting")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TaskType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MonitoringId");

                    b.ToTable("Monitorings");

                    b.HasData(
                        new
                        {
                            MonitoringId = 1,
                            Aggregate = "Agg1",
                            Alias = "NodeA",
                            Contact = "Contact1",
                            ContactCC = "ContactCC1",
                            Delay = 5,
                            LastControlPosition = "Position1",
                            LastModified = new DateTime(2024, 10, 2, 5, 50, 17, 744, DateTimeKind.Utc).AddTicks(7897),
                            NextReconciliationDate = new DateTime(2024, 10, 9, 5, 50, 17, 744, DateTimeKind.Utc).AddTicks(7888),
                            Node = "Node_001",
                            NodeType = "Type1",
                            Player = "Player1",
                            ProcessDuration = 30,
                            SLA = "SLA1",
                            Shifting = "Shift1",
                            TaskType = "Task1"
                        },
                        new
                        {
                            MonitoringId = 2,
                            Aggregate = "Agg2",
                            Alias = "NodeB",
                            Contact = "Contact2",
                            ContactCC = "ContactCC2",
                            Delay = 3,
                            LastControlPosition = "Position2",
                            LastModified = new DateTime(2024, 10, 2, 5, 50, 17, 744, DateTimeKind.Utc).AddTicks(7902),
                            NextReconciliationDate = new DateTime(2024, 10, 16, 5, 50, 17, 744, DateTimeKind.Utc).AddTicks(7901),
                            Node = "Node_002",
                            NodeType = "Type2",
                            Player = "Player2",
                            ProcessDuration = 45,
                            SLA = "SLA2",
                            Shifting = "Shift2",
                            TaskType = "Task2"
                        },
                        new
                        {
                            MonitoringId = 3,
                            Aggregate = "Agg3",
                            Alias = "NodeC",
                            Contact = "Contact3",
                            ContactCC = "ContactCC3",
                            Delay = 7,
                            LastControlPosition = "Position3",
                            LastModified = new DateTime(2024, 10, 2, 5, 50, 17, 744, DateTimeKind.Utc).AddTicks(7906),
                            NextReconciliationDate = new DateTime(2024, 11, 1, 5, 50, 17, 744, DateTimeKind.Utc).AddTicks(7905),
                            Node = "Node_003",
                            NodeType = "Type3",
                            Player = "Player3",
                            ProcessDuration = 60,
                            SLA = "SLA3",
                            Shifting = "Shift3",
                            TaskType = "Task3"
                        },
                        new
                        {
                            MonitoringId = 4,
                            Aggregate = "Agg4",
                            Alias = "NodeD",
                            Contact = "Contact4",
                            ContactCC = "ContactCC4",
                            Delay = 10,
                            LastControlPosition = "Position4",
                            LastModified = new DateTime(2024, 10, 2, 5, 50, 17, 744, DateTimeKind.Utc).AddTicks(7910),
                            NextReconciliationDate = new DateTime(2024, 10, 23, 5, 50, 17, 744, DateTimeKind.Utc).AddTicks(7909),
                            Node = "Node_004",
                            NodeType = "Type4",
                            Player = "Player4",
                            ProcessDuration = 90,
                            SLA = "SLA4",
                            Shifting = "Shift4",
                            TaskType = "Task4"
                        },
                        new
                        {
                            MonitoringId = 5,
                            Aggregate = "Agg5",
                            Alias = "NodeE",
                            Contact = "Contact5",
                            ContactCC = "ContactCC5",
                            Delay = 15,
                            LastControlPosition = "Position5",
                            LastModified = new DateTime(2024, 10, 2, 5, 50, 17, 744, DateTimeKind.Utc).AddTicks(7914),
                            NextReconciliationDate = new DateTime(2024, 12, 1, 5, 50, 17, 744, DateTimeKind.Utc).AddTicks(7913),
                            Node = "Node_005",
                            NodeType = "Type5",
                            Player = "Player5",
                            ProcessDuration = 120,
                            SLA = "SLA5",
                            Shifting = "Shift5",
                            TaskType = "Task5"
                        });
                });

            modelBuilder.Entity("EFCoreAssignment.Models.Node", b =>
                {
                    b.Property<int?>("NodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("NodeId"));

                    b.Property<string>("Aggregate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ContactCCId")
                        .HasColumnType("int");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<int?>("EmailTemplateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LifeInsuranceClass")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NodeIdentifier")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NodeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NodeSubType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NodeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PeriodicFormat")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("PeriodicFormatStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Player")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProcessDuration")
                        .HasColumnType("int");

                    b.Property<string>("Shifting")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SlaId")
                        .HasColumnType("int");

                    b.Property<string>("TaskType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TransactionFormat")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("TransactionFormatStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("NodeId");

                    b.ToTable("Nodes");

                    b.HasData(
                        new
                        {
                            NodeId = 1,
                            Aggregate = "Agg1",
                            Alias = "AliasA",
                            ContactCCId = 401,
                            ContactId = 301,
                            EmailTemplateId = 101,
                            LastModified = new DateTime(2024, 10, 2, 5, 50, 17, 744, DateTimeKind.Utc).AddTicks(7950),
                            LifeInsuranceClass = "ClassA",
                            NodeIdentifier = "ID001",
                            NodeName = "Node Alpha",
                            NodeSubType = "SubType1",
                            NodeType = "Type1",
                            PeriodicFormat = "Format1",
                            PeriodicFormatStartDate = new DateTime(2024, 10, 2, 5, 50, 17, 744, DateTimeKind.Utc).AddTicks(7944),
                            Player = "Player1",
                            ProcessDuration = 30,
                            Shifting = "ShiftA",
                            SlaId = 201,
                            TaskType = "Task1",
                            TransactionFormat = "TransFormat1",
                            TransactionFormatStartDate = new DateTime(2024, 10, 2, 5, 50, 17, 744, DateTimeKind.Utc).AddTicks(7946)
                        },
                        new
                        {
                            NodeId = 2,
                            Aggregate = "Agg2",
                            Alias = "AliasB",
                            ContactCCId = 402,
                            ContactId = 302,
                            EmailTemplateId = 102,
                            LastModified = new DateTime(2024, 10, 2, 5, 50, 17, 744, DateTimeKind.Utc).AddTicks(7957),
                            LifeInsuranceClass = "ClassB",
                            NodeIdentifier = "ID002",
                            NodeName = "Node Beta",
                            NodeSubType = "SubType2",
                            NodeType = "Type2",
                            PeriodicFormat = "Format2",
                            PeriodicFormatStartDate = new DateTime(2024, 10, 3, 5, 50, 17, 744, DateTimeKind.Utc).AddTicks(7953),
                            Player = "Player2",
                            ProcessDuration = 45,
                            Shifting = "ShiftB",
                            SlaId = 202,
                            TaskType = "Task2",
                            TransactionFormat = "TransFormat2",
                            TransactionFormatStartDate = new DateTime(2024, 10, 3, 5, 50, 17, 744, DateTimeKind.Utc).AddTicks(7955)
                        },
                        new
                        {
                            NodeId = 3,
                            Aggregate = "Agg3",
                            Alias = "AliasC",
                            ContactCCId = 403,
                            ContactId = 303,
                            EmailTemplateId = 103,
                            LastModified = new DateTime(2024, 10, 2, 5, 50, 17, 744, DateTimeKind.Utc).AddTicks(7963),
                            LifeInsuranceClass = "ClassC",
                            NodeIdentifier = "ID003",
                            NodeName = "Node Gamma",
                            NodeSubType = "SubType3",
                            NodeType = "Type3",
                            PeriodicFormat = "Format3",
                            PeriodicFormatStartDate = new DateTime(2024, 10, 4, 5, 50, 17, 744, DateTimeKind.Utc).AddTicks(7960),
                            Player = "Player3",
                            ProcessDuration = 60,
                            Shifting = "ShiftC",
                            SlaId = 203,
                            TaskType = "Task3",
                            TransactionFormat = "TransFormat3",
                            TransactionFormatStartDate = new DateTime(2024, 10, 4, 5, 50, 17, 744, DateTimeKind.Utc).AddTicks(7961)
                        },
                        new
                        {
                            NodeId = 4,
                            Aggregate = "Agg4",
                            Alias = "AliasD",
                            ContactCCId = 404,
                            ContactId = 304,
                            EmailTemplateId = 104,
                            LastModified = new DateTime(2024, 10, 2, 5, 50, 17, 744, DateTimeKind.Utc).AddTicks(7968),
                            LifeInsuranceClass = "ClassD",
                            NodeIdentifier = "ID004",
                            NodeName = "Node Delta",
                            NodeSubType = "SubType4",
                            NodeType = "Type4",
                            PeriodicFormat = "Format4",
                            PeriodicFormatStartDate = new DateTime(2024, 10, 5, 5, 50, 17, 744, DateTimeKind.Utc).AddTicks(7965),
                            Player = "Player4",
                            ProcessDuration = 90,
                            Shifting = "ShiftD",
                            SlaId = 204,
                            TaskType = "Task4",
                            TransactionFormat = "TransFormat4",
                            TransactionFormatStartDate = new DateTime(2024, 10, 5, 5, 50, 17, 744, DateTimeKind.Utc).AddTicks(7966)
                        },
                        new
                        {
                            NodeId = 5,
                            Aggregate = "Agg5",
                            Alias = "AliasE",
                            ContactCCId = 405,
                            ContactId = 305,
                            EmailTemplateId = 105,
                            LastModified = new DateTime(2024, 10, 2, 5, 50, 17, 744, DateTimeKind.Utc).AddTicks(7973),
                            LifeInsuranceClass = "ClassE",
                            NodeIdentifier = "ID005",
                            NodeName = "Node Epsilon",
                            NodeSubType = "SubType5",
                            NodeType = "Type5",
                            PeriodicFormat = "Format5",
                            PeriodicFormatStartDate = new DateTime(2024, 10, 6, 5, 50, 17, 744, DateTimeKind.Utc).AddTicks(7970),
                            Player = "Player5",
                            ProcessDuration = 120,
                            Shifting = "ShiftE",
                            SlaId = 205,
                            TaskType = "Task5",
                            TransactionFormat = "TransFormat5",
                            TransactionFormatStartDate = new DateTime(2024, 10, 6, 5, 50, 17, 744, DateTimeKind.Utc).AddTicks(7971)
                        });
                });

            modelBuilder.Entity("EFCoreAssignment.Models.Sla", b =>
                {
                    b.Property<int?>("SlaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("SlaId"));

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("SlaAnniversary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SlaEscalationDays")
                        .HasColumnType("int");

                    b.Property<bool>("SlaExcludeWeekends")
                        .HasColumnType("bit");

                    b.Property<string>("SlaFrequencyPosition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SlaFrequencyTransaction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SlaName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("SlaReminderDays")
                        .HasColumnType("int");

                    b.HasKey("SlaId");

                    b.ToTable("Slas");
                });

            modelBuilder.Entity("EFCoreAssignment.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            FirstName = "John",
                            LastName = "Doe",
                            PasswordHash = "$2a$14$ygNCCR4r3bKrZTM1G.gqC.aXrdgz0dN5qKyqsFW3/egoSRhe5quOW",
                            UserName = "johndoe"
                        },
                        new
                        {
                            UserId = 2,
                            FirstName = "Jane",
                            LastName = "Smith",
                            PasswordHash = "$2a$14$ygNCCR4r3bKrZTM1G.gqC.aXrdgz0dN5qKyqsFW3/egoSRhe5quOW",
                            UserName = "janesmith"
                        },
                        new
                        {
                            UserId = 3,
                            FirstName = "Alice",
                            LastName = "Johnson",
                            PasswordHash = "$2a$14$ygNCCR4r3bKrZTM1G.gqC.aXrdgz0dN5qKyqsFW3/egoSRhe5quOW",
                            UserName = "alicejohnson"
                        },
                        new
                        {
                            UserId = 4,
                            FirstName = "Bob",
                            LastName = "Brown",
                            PasswordHash = "$2a$14$ygNCCR4r3bKrZTM1G.gqC.aXrdgz0dN5qKyqsFW3/egoSRhe5quOW",
                            UserName = "bobbrown"
                        },
                        new
                        {
                            UserId = 5,
                            FirstName = "Charlie",
                            LastName = "Davis",
                            PasswordHash = "$2a$14$ygNCCR4r3bKrZTM1G.gqC.aXrdgz0dN5qKyqsFW3/egoSRhe5quOW",
                            UserName = "charliedavis"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
